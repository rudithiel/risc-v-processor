{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // module: Control\
// Function: Generates the control signals for each one of the datapath resources\
\
module control_unit(\
      input  wire [6:0] opcode,\
      output reg  [1:0] alu_op,\
      output reg        reg_dst,\
      output reg        branch,\
      output reg        mem_read,\
      output reg        mem_2_reg,\
      output reg        mem_write,\
      output reg        alu_src,\
      output reg        reg_write,\
      output reg        jump\
   );\
\
   // RISC-V opcode[6:0] (see RISC-V greensheet)\
   parameter integer ALU_R      = 7'b0110011;\
   parameter integer ADDI       = 7'b0010011;\
   parameter integer BEQ        = 7'b1100011;\
   parameter integer JUMP       = 7'b1101111;\
   parameter integer LD         = 7'b0000011;\
   parameter integer SD         = 7'b0100011;\
\
   // RISC-V ALUOp[1:0] (see book Figure 4.12)\
   parameter [1:0] ADD_OPCODE     = 2'b00;\
   parameter [1:0] SUB_OPCODE     = 2'b01;\
   parameter [1:0] R_TYPE_OPCODE  = 2'b10;\
\
   //The behavior of the control unit can be found in Chapter 4, Figure 4.18\
\
   always@(*)begin\
\
      case(opcode)\
         ALU_R:begin\
            alu_src   = 1'b0;\
            mem_2_reg = 1'b0;\
            reg_write = 1'b1;\
            mem_read  = 1'b0;\
            mem_write = 1'b0;\
            branch    = 1'b0;\
            alu_op    = R_TYPE_OPCODE;\
            jump      = 1'b0;\
         end\
\
         ADDI:begin\
            alu_src   = 1'b1;\
            mem_2_reg = 1'b0;\
            reg_write = 1'b1;\
            mem_read  = 1'b0;\
            mem_write = 1'b0;\
            branch    = 1'b0;\
            alu_op    = ADD_OPCODE;\
            jump      = 1'b0;\
         end\
\
         BEQ:begin\
            alu_src   = 1'b0;\
            mem_2_reg = 1'b0;\
            reg_write = 1'b0;\
            mem_read  = 1'b0;\
            mem_write = 1'b0;\
            branch    = 1'b1;\
            alu_op    = SUB_OPCODE;\
            jump      = 1'b0;\
         end\
\
         JUMP:begin\
            alu_src   = 1'b0;\
            mem_2_reg = 1'b0;\
            reg_write = 1'b0;\
            mem_read  = 1'b0;\
            mem_write = 1'b0;\
            branch    = 1'b0;\
            alu_op    = R_TYPE_OPCODE;\
            jump      = 1'b1;\
         end\
\
         LD:begin\
            alu_src   = 1'b1;\
            mem_2_reg = 1'b1;\
            reg_write = 1'b1;\
            mem_read  = 1'b1;\
            mem_write = 1'b0;\
            branch    = 1'b0;\
            alu_op    = ADD_OPCODE;\
            jump      = 1'b0;\
         end\
\
         SD:begin\
            alu_src   = 1'b1;\
            mem_2_reg = 1'b0;\
            reg_write = 1'b0;\
            mem_read  = 1'b0;\
            mem_write = 1'b1;\
            branch    = 1'b0;\
            alu_op    = ADD_OPCODE;\
            jump      = 1'b0;\
         end\
\
         default:begin\
            alu_src   = 1'b0;\
            mem_2_reg = 1'b0;\
            reg_write = 1'b0;\
            mem_read  = 1'b0;\
            mem_write = 1'b0;\
            branch    = 1'b0;\
            alu_op    = R_TYPE_OPCODE;\
            jump      = 1'b0;\
         end\
      endcase\
   end\
\
endmodule\
\
           \
}